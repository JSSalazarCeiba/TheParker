/**
 * 
 */
package domain.manager.impl;

import domain.manager.DataValidatorManager;
import domain.model.Car;
import domain.model.Motorcycle;
import domain.model.ParkingCell;
import domain.model.Plate;
import domain.model.Vehicle;
import domain.utility.Constants;

/**
 * @author juan.salazar
 *
 */
public class DataValidatorManagerImpl implements DataValidatorManager {

	@Override
	public Plate validateVehicle(Car car) {
		Plate carPlate;
		String plate = car.getPlate();
		String type = car.getType();
		if (validatePlateNotNull(plate) && validateTypeNotNull(type)) {
			String plateType = getPlateType(car);
			if (!plateType.equals(Constants.INVALID_PLATE)) {
				carPlate = new Plate(plate, plateType, true);
			} else {
				carPlate = new Plate(plate, plateType, false);
			}
		} else {
			carPlate = new Plate(plate, Constants.INVALID_PLATE, false);
		}
		return carPlate;
	}

	@Override
	public Plate validateVehicle(Motorcycle motorcycle) {
		return null;
	}

	@Override
	public Plate validateParkingCell(ParkingCell cell) {
		return null;
	}
	
	/****************************** PRIVATE *************************************/
	
	public Boolean validatePlateNotNull(String plate) {
		Boolean validPlate;
		if (plate != null && !plate.isEmpty()) {
			validPlate = true;
		} else {
			validPlate = false;
		}
		return validPlate;
	}
	
	public Boolean validatePlateLength(String plate) {
		Boolean validPlate;
		if (plate.length() <= Constants.PLATE_MAX_LENGTH && 
				plate.length() >= Constants.PLATE_MIN_LENGTH) {
			validPlate = true;
		} else {
			validPlate = false;
		}
		return validPlate;
	}
	
	public String getPlateType(Car car) {
		String type;
		String plate = car.getPlate();
		if (isRegularPlate(plate)) {
			type = Constants.REGULAR_PLATE;
		} else if (isDiplomaticPlate(plate)) {
			type = Constants.DIPLOMATIC_PLATE;
		} else if (isCargoPlate(plate)) {
			type = Constants.CARGO_PLATE;
		} else {
			type = Constants.INVALID_PLATE;
		}
		return type;
	}
	
	public String getPlateType(Motorcycle motorcycle) {
		String type;
		String plate = motorcycle.getPlate();
		if (isMotorcyclePlate(plate)) {
			type = Constants.MOTORCYCLE_PLATE;
		} else {
			type = Constants.INVALID_PLATE;
		}
		return type;
	}
	
	public Boolean isRegularPlate(String plate) {
		return plate.matches(Constants.REGEX_REGULAR_PLATE);
	}
	
	public Boolean isDiplomaticPlate(String plate) {
		return plate.matches(Constants.REGEX_DIPLOMATIC_PLATE);
	}
	
	public Boolean isCargoPlate(String plate) {
		return plate.matches(Constants.REGEX_CARGO_PLATE);
	}
	
	public Boolean isMotorcyclePlate(String plate) {
		return plate.matches(Constants.REGEX_MOTORCYCLE_PLATE);
	}
	
	public Boolean validateTypeNotNull(String type) {
		Boolean validType;
		if (type != null && !type.isEmpty()) {
			validType = true;
		} else {
			validType = false;
		}
		return validType;
	}
	
	public Boolean validateCcNotNull(Integer cc) {
		Boolean validCc;
		if (cc!= null) {
			validCc = true;
		} else {
			validCc = false;
		}
		return validCc;
	}

}
