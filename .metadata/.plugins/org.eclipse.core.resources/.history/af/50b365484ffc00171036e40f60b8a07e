/**
 * 
 */
package domain.task.impl;

import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Service;

import domain.model.VehicleRecord;
import domain.task.FeeCalculatorTask;
import domain.utility.Constants;
import infrastructure.dao.FeeCalculatorTaskDao;

/**
 * Implementation of the FeeCalculatorTask
 * @author juan.salazar
 *
 */
@Service
public class FeeCalculatorTaskImpl implements FeeCalculatorTask {
	
	FeeCalculatorTaskDao feeCalculatorTaskDao;

	/*
	 * Method that calculates the current charged fee for all vehicles
	 * 
	 * (non-Javadoc)
	 * @see domain.task.FeeCalculatorTask#calculateChargedFee()
	 */
	@Override
	public Long calculateChargedFee() {
		
		Long fee = 0L;
		
		// Get active vehicles records
		List<VehicleRecord> vehicleRecords = getActiveVehicleRecord();
		
		// Find time parked
		for (VehicleRecord record: vehicleRecords) {
			Long parkingTime = findParkingTime(record);
			Integer parkingHours = findParkingHours(parkingTime);
			fee = findFee(record, parkingHours);
			//public updateParkedTime();
		}
		return fee;
	}
	
	/*
	 * Method to get the list of vehicles currently parked 
	 * in the parking lot
	 */
	private List<VehicleRecord> getActiveVehicleRecord() {
		return feeCalculatorTaskDao.getActiveVehicleRecord();
	}
	
	/*
	 * Method to get the parking time for each vehicle
	 */
	private Long findParkingTime(VehicleRecord record) {
		Date currentTime = new Date();
		return currentTime.getTime() - record.getTimeIn().getTime();
	}
	
	/*
	 * Method to get the parking hours for each vehicle
	 */
	private Integer findParkingHours(Long parkingTime) {
		return (int) (parkingTime * Constants.HOURS_PER_MS);
	}
	
	/*
	 * Method to get the parking time in human readable format
	 */
	private String findParkingTimeToShow(Long parkingTime) {
		Long parkingHours = (parkingTime * Constants.HOURS_PER_MS);
		Integer days = findDays(parkingHours);
		Integer hours = findHours(parkingHours, days);
		return null;
	}
	
	/*
	 * Method to find the parking days
	 */
	private Integer findDays(Long parkingHours) {
		return (int) (parkingHours/Constants.HOURS_PER_DAY);
	}
	
	/*
	 * Method to find the parking hours
	 */
	private Integer findHours(Long parkingHours, Integer days) {
		return (int) (parkingHours - (days * Constants.HOURS_PER_DAY));
	}
	
	/*
	 * Method to find the parking minutes
	 */
	private Integer findMinutes(Long parkingHours, Integer days, Integer hours) {
		return (int) ((parkingHours - hours - 
				(days * Constants.HOURS_PER_DAY)) * Constants.MINUTES_PER_HOUR);
	}
	
	/*
	 * Method to get the fee depending on the parking hours
	 */
	private Long findFee(VehicleRecord record, Integer parkingHours) {
		Long fee = 0L;
		if (parkingHours < Constants.HOURS_FARE_LIMIT) {
			fee = findFeeByVehicleType(record, parkingHours, Constants.HOUR_RATE);
		} else if (parkingHours >= Constants.HOURS_FARE_LIMIT &&
				parkingHours < Constants.DAYS_FARE_LIMIT) {
			fee = findFeeByVehicleType(record, parkingHours, Constants.DAY_RATE);
		} else if (parkingHours >= Constants.DAYS_FARE_LIMIT) {
			fee = findFeeByVehicleType(record, parkingHours, Constants.MIXED_RATE);
		}
		return fee;
	}
	
	/*
	 * Method to get the fee based on the vehicle type
	 */
	
	private Long findFeeByVehicleType(VehicleRecord record, Integer parkingHours, String rate) {
		Long fee = 0L;
		String vehicleType = record.getVehicle().getType();
		if (vehicleType.equals(Constants.CAR)) {
			fee = findFeeCar(parkingHours, rate);
		} else if (vehicleType.equals(Constants.MOTORCYCLE)) {
			fee = findFeeMotorcycle(parkingHours, rate, record.getCc());
		}
		return fee;
	}
	
	/*
	 * Method to get the fee for cars
	 */
	private Long findFeeCar(Integer parkingHours, String rate) {
		Long fee = 0L;
		switch (rate) {
		case Constants.HOUR_RATE:
			fee = (long) (parkingHours * Constants.HOUR_FARE_CAR);
			break;
		case Constants.DAY_RATE:
			fee = (long) Constants.DAY_FARE_CAR;
			break;
		case Constants.MIXED_RATE:
			fee = findMixedFeeCar(parkingHours);
			break;
		default:
			break;
		}
		return fee;
	}
	
	/*
	 * Method to get the fee for motorcycles
	 */
	private Long findFeeMotorcycle(Integer parkingHours, String rate, Integer cc) {
		Long fee = 0L;
		switch (rate) {
		case Constants.HOUR_RATE:
			fee = (long) (parkingHours * Constants.HOUR_FARE_MOTORCYCLE);
			break;
		case Constants.DAY_RATE:
			fee = (long) Constants.DAY_FARE_MOTORCYCLE;
			break;
		case Constants.MIXED_RATE:
			fee = findMixedFeeMotorcycle(parkingHours);
			break;
		default:
			break;
		}
		if (cc > Constants.FARE_LIMIT_CC_MOTORCYCLE) {
			fee = fee + Constants.FARE_LIMIT_CC_MOTORCYCLE;
		}
		return fee;
	}
	
	/*
	 * Method to get complex fees for cars
	 */
	private Long findMixedFeeCar(Integer parkingHours) {
		Long fee = 0L;
		Integer days = findNumberOfDays(parkingHours);
		Integer remainingHours = findRemainingHours(parkingHours, days);
		if (remainingHours < Constants.HOURS_FARE_LIMIT) {
			fee = (long) (days * Constants.DAY_FARE_CAR) + 
					(remainingHours * Constants.HOUR_FARE_CAR);
		} else if (remainingHours >= Constants.HOURS_FARE_LIMIT) {
			fee = (long) ((days + 1) * Constants.DAY_FARE_CAR);
		}
		return fee;
	}
	
	/*
	 * Method to get complex fees for motorcycles
	 */
	private Long findMixedFeeMotorcycle(Integer parkingHours) {
		Long fee = 0L;
		Integer days = findNumberOfDays(parkingHours);
		Integer remainingHours = findRemainingHours(parkingHours, days);
		if (remainingHours < Constants.HOURS_FARE_LIMIT) {
			fee = (long) (days * Constants.DAY_FARE_MOTORCYCLE) + 
					(remainingHours * Constants.HOUR_FARE_MOTORCYCLE);
		} else if (remainingHours >= Constants.HOURS_FARE_LIMIT) {
			fee = (long) ((days + 1) * Constants.DAY_FARE_MOTORCYCLE);
		}
		return fee;
	}
	
	/*
	 * Method to find the number of days parked
	 */
	private Integer findNumberOfDays(Integer parkingHours) {
		return parkingHours/Constants.DAYS_FARE_LIMIT;
	}
	
	/*
	 * Method to find the number of remaining hours parked:
	 * Discounting the days
	 */
	private Integer findRemainingHours(Integer parkingHours, Integer days) {
		return parkingHours - (days * Constants.DAYS_FARE_LIMIT);
	}

}
